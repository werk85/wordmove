# Wordmove

![logo](https://raw.githubusercontent.com/welaika/wordmove/master/assets/images/wordmove.png)

Wordmove is a command line tool that lets you automatically mirror local WordPress
installations and DB data back and forth from your local development machine to
one or more remote servers.

Wordmove has also a neat [hook](https://github.com/welaika/wordmove/wiki/Hooks) system which enables you to run arbitrary commands
before and after push/pull actions. Local and remote commands are both supported (remote
ones only on SSH protocol).

[FTP support development has been discontinued](https://github.com/welaika/wordmove/wiki/FTP-support-disclaimer), thus not all features are granted when using this protocol.

[![Tests](https://github.com/welaika/wordmove/workflows/Tests/badge.svg)](https://github.com/welaika/wordmove/actions)
[![Slack channel](https://img.shields.io/badge/Slack-WP--Hub-blue.svg)](https://wphub-auto-invitation.herokuapp.com/)
[![Gem Version](https://badge.fury.io/rb/wordmove.svg)](https://rubygems.org/gems/wordmove)
[![Docker Build Status](https://img.shields.io/docker/automated/welaika/wordmove.svg)](https://hub.docker.com/r/welaika/wordmove/)

## Development

If you want to test-run your local wordmove, build a local docker image and use that in one of your projects as a base image.

#### Build local docker image

`docker build -t local/wordmove:latest -f docker/Dockerfile . --no-cache`

#### Use local docker image

```yaml
FROM local/wordmove:latest

# Add your project-specific configurations
WORKDIR /app
COPY . .

# Additional commands for your project

```

## Installation

Wordmove is developed in ruby and packaged and distributed as a gem.

To install:

    gem install wordmove

And to update:

    gem update wordmove

You can read more about ruby gems ecosystem on the official site https://rubygems.org/.

## Peer dependencies

Wordmove acts as automation glue between tools you already have and love. These are its peer dependencies which **you need to have installed** and executable through your system $PATH:

| Program   | Mandatory?                       |
| --------- | -------------------------------- |
| rsync     | Yes for SSH protocol             |
| mysql     | Yes                              |
| mysqldump | Yes                              |
| wp-cli    | Yes by default, but configurable |
| lftp      | Yes, for FTP protocol            |

Wordmove also expect that the remote server will have the following commands: `gzip`, `nice`, `mysql`, `rsync`. All of these should be always present by default on any WordPress hosting.

## Usage

```
> wordmove help
Commands:
  wordmove --version, -v    # Print the version
  wordmove doctor           # Do some local configuration and environment checks
  wordmove help [TASK]      # Describe available tasks or one specific task
  wordmove init             # Generates a brand new movefile.yml
  wordmove list             # List all environments and vhosts
  wordmove pull             # Pulls WP data from remote host to the local machine
  wordmove push             # Pushes WP data from local machine to remote host
```

Move inside the WordPress folder and use `wordmove init` to generate a new `movefile.yml` and edit it with your settings. Read the next paragraph for more info.

**See the wiki article: [Usage and flags explained](https://github.com/welaika/wordmove/wiki/Usage-and-flags-explained) for more info.**

### Experimental Database Sync

If you're experiencing SSH connection issues when syncing databases (such as `Ed25519::VerifyError`), you can try the experimental database sync mechanism:

```bash
wordmove pull --experimental-db
wordmove push --experimental-db
```

This flag uses system-native SSH commands instead of the Ruby `net-ssh` library, which may resolve compatibility issues with modern SSH servers. Note that this is an experimental feature and may not work in all environments.

### Multistage

You can define multiple remote environments in your `movefile.yml`, such as production, staging, etc. Every first level key in the YAML other than the defaults and mandatory `global` and `local` will be interpreted as a remote environment.

Use `-e` with `pull` or `push` to run the command on the specified environment.

For example: `wordmove push -e staging -d` will push your local database to the staging environment.

We warmly **recommend to read the wiki article**: [Multiple environments explained](https://github.com/welaika/wordmove/wiki/Multiple-environments-explained)

## movefile.yml

You can configure Wordmove creating a `movefile.yml`. That's a YAML file with local and remote host(s) infos:

```yaml
global:
  sql_adapter: wpcli

local:
  vhost: http://vhost.local
  wordpress_path: /home/john/sites/your_site # use an absolute path here

  database:
    name: database_name
    user: user
    password: password
    host: localhost

  # paths: # you can customize wordpress internal paths
  #   wp_content: wp-content
  #   uploads: wp-content/uploads
  #   plugins: wp-content/plugins
  #   themes: wp-content/themes
  #   languages: wp-content/languages

production:
  vhost: http://example.com
  wordpress_path: /var/www/your_site # use an absolute path here

  database:
    name: database_name
    user: user
    password: password
    host: host
    # port: 3308 # Use just in case you have exotic server config
    # mysqldump_options: --max_allowed_packet=50MB # Only available if using SSH
    # mysql_options: --protocol=TCP # Only available if using SSH

  exclude:
    - ".git/"
    - ".gitignore"
    - "node_modules/"
    - "bin/"
    - "tmp/*"
    - "Gemfile*"
    - "Movefile"
    - "movefile"
    - "movefile.yml"
    - "movefile.yaml"
    - "wp-config.php"
    - "wp-content/*.sql.gz"
    - "*.orig"

  ssh:
    host: host
    user: user
#  hooks: # Remote hooks won't work with FTP
#    push:
#      before:
#        - command: 'echo "do something"'
#          where: local
#          raise: false # raise is true by default
#      after:
#        - command: 'echo "do something"'
#          where: remote
#    pull:
#      before:
#        - command: 'echo "do something"'
#          where: local
#          raise: false
#      after:
#        - command: 'echo "do something"'
#          where: remote
```

We warmly **recommend to read the wiki articles**

- [Multiple environments explained](https://github.com/welaika/wordmove/wiki/Multiple-environments-explained)
- [Movefile configurations explained](https://github.com/welaika/wordmove/wiki/movefile.yml-configurations-explained)

to understand more about supported configurations.

## Environment Variables

Wordmove allows the use of environment variables in your movefiles.
This is useful in order to protect sensitive variables and credentials, as well as make it easy to share movefiles between your team.

Environment variables are written using the **ERB tags** syntax:

```
"<%= ENV['YOUR_SECRET_NAME'] %>"
```

### Variables set up

Environment variables can be set up using two methods:

#### Using the shell:

```bash
# bash
export PROD_DB_USER="username" PROD_DB_PASS="password"

# fish
set --export --global PROD_DB_USER "username"; set --export --global PROD_DB_PASS "password"
```

#### Using a `.env` file:

Wordmove supports the [dotenv](https://github.com/bkeepers/dotenv) module.

Simply create a `.env` file next to your movefile structured as follows:

```bash
PROD_DB_USER="username"
PROD_DB_PASS="password"
```

Wordmove will take care of loading the file and making the environment variables ready to be used in your configuration file.

You may also use `.env.{environmentname}`, but this is discouraged.

### Use them in your `movefile.yml`

Using the ERB syntax described above, write your movefile as follows:

```yaml
production:
  database:
    user: "<%= ENV['PROD_DB_USER'] %>"
    password: "<%= ENV['PROD_DB_PASS'] %>"
```

### System variables

You can use system variables to configure your movefile.

For example:

```yaml
local:
  vhost: "http://wordpress-site.localhost"
  wordpress_path: "<%= ENV['HOME'] %>/[wordpress directory path]/"
  # wordpress_path will be substituted with /home/user_name/[wordpress directory path]
```

## Supports

### OS

OS X and Linux are fully supported.

See the [Windows (un)support disclaimer](<https://github.com/welaika/wordmove/wiki/Windows-(un)support-disclaimer>)

### Docker

We have a docker image bringing the latest Wordmove's version with autobuild on new releases.

[![Docker Build Status](https://img.shields.io/docker/automated/welaika/wordmove.svg)](https://hub.docker.com/r/welaika/wordmove/)

### SSH

- You need `rsync` on your machine; as far as we know it's already installed on OS X and Linux.
- To use your SSH public key for authentication, just delete the `production.ssh.password` field in your `movefile.yml`. Easy peasy.
- writing the password inside `movefile.yml` was and is somewhat supported, but **we discourage this practice** in favor of password-less authentication with pub key. Read [here](https://github.com/welaika/wordmove/wiki/%5Bdeprecated%5D-SSH-password-inside-Movefile) for old informations.

### FTP and SFTP

- You need to install `lftp` on your machine. See community wiki article: [Install lftp on OSX yosemite](https://github.com/welaika/wordmove/wiki/Install-lftp-on-OSX-yosemite)).
- Use the relative FTP path as `production.wordpress_path`
- Use the absolute FTP path as `production.wordpress_absolute_path` (you may need to recover this from the `__FILE__` [magic constant](http://php.net/manual/en/language.constants.predefined.php)
- if you want to specify a passive FTP connection add to the YAML config a `production.ftp.passive` flag and set it to `true`.

FTP support development is [discontinued](https://github.com/welaika/wordmove/wiki/FTP-support-disclaimer), but it's always there.

Sice version 3.2.0 SFTP is fully supported, with same functionalities as FTP, through `production.ftp.scheme`
configuration. More information found in the wiki.

## Notes

### Mirroring

Push and pull actions on files will perform a **mirror** operation. Please, keep
in mind that to mirror means to transfer new/updated files **and remove files**
from destination if not present in source.

This means that if you have files/directories on your remotes which you must
preserve, you **must exclude those in your movefile.yml**, or they will be
deleted.

### How the heck you are able to sync the DB via FTP?

We're glad you asked! We basically upload via FTP a PHP script that performs the various
import/export operations. This script then gets executed via HTTP. Don't worry
too much about security though: the script is deleted just after the usage,
and can only be executed by `wordmove`, as each time it requires a pre-shared
one-time-password to be run.

### Yanked versions

Wordmove `1.3.1` has been removed from `rubygems` due to a bug with FTP deploying system. If you are
using this version, please update soon (`gem update wordmove`).

## Need more tools?

Visit [Wordpress Tools](https://www.wptools.it).

## Credits

- The dump script is the [`MYSQL-dump` PHP package](https://github.com/dg/MySQL-dump) by David Grudl
- The import script used is the [BigDump](http://www.ozerov.de/bigdump/) library

## Contribute

Please, read the [contributor guide](https://github.com/welaika/wordmove/blob/master/CONTRIBUTING.md).

Feel free to open a discussion issue about contribution if you need more info.

## Author

made with ❤️ and ☕️ by [weLaika](https://dev.welaika.com)
